let
  sources = import nix/sources.nix;
in
{ pkgs ? import sources.nixpkgs {}
, pypiData ? sources.pypi-deps-db
, mach-nix ? import sources.mach-nix { inherit pkgs pypiData; }
, tahoe-lafs-source ? "tahoe-lafs"
, tahoe-lafs-repo ? sources.${tahoe-lafs-source}
, zkapauthorizer-source ? "zkapauthorizer"
, zkapauthorizer-repo ? sources.${zkapauthorizer-source}
, magic-folder-source ? "magic-folder"
, magic-folder-repo ? sources.${magic-folder-source}
, gridsync-source ? "gridsync"
, gridsync-repo ? sources.${gridsync-source}
}:
  let
    lib = pkgs.lib;
    providers = {
      _default = "sdist,nixpkgs,wheel";
      # mach-nix doesn't provide a good way to depend on mach-nix packages,
      # so we get it as a nixpkgs dependency from an overlay. See below for
      # details.
      tahoe-lafs = "nixpkgs";
      # not packaged in nixpkgs at all, we can use the binary wheel from
      # pypi though.
      python-challenge-bypass-ristretto = "wheel";
      # Pure python packages that don't build correctly from sdists
      # - patches in nixpkgs that don't apply
      boltons = "wheel";
      chardet = "wheel";
      urllib3 = "wheel";
      # - incorrectly detected dependencies due to pbr
      fixtures = "wheel";
      testtools = "wheel";
      traceback2 = "wheel";
      # - Incorrectly merged extras - https://github.com/DavHau/mach-nix/pull/334
      tqdm = "wheel";

      # nixpkgs carries a patch that doesn't apply anymore
      klein = "wheel";

      # It is so hard to build!
      pyqt5 = "wheel";
    };
  in
    rec {
      inherit mach-nix;

      tahoe-lafs = mach-nix.buildPythonPackage rec {
        inherit providers;
        python = "python27";
        name = "tahoe-lafs";
        version = "1.15.1";
        # See https://github.com/DavHau/mach-nix/issues/190
        requirementsExtra = ''
          pyrsistent < 0.17
          foolscap == 0.13.1
          eliot ~= 1.7
          configparser
        '';
        postPatch = ''
          cat > src/allmydata/_version.py <<EOF
          # This _version.py is generated by nix.

          verstr = "${version}+git-${tahoe-lafs-repo.rev}"
          __version__ = verstr
          EOF
        '';
        src = tahoe-lafs-repo;
      };
      zkapauthorizer = mach-nix.buildPythonApplication rec {
        inherit providers;
        python = "python27";
        name = "ZKAPAuthorizer";
        version = "0.0.1";
        # mach-nix does not provide a way to specify dependencies on other
        # mach-nix packages, that incorporates the requirements and overlays
        # of that package.
        # See https://github.com/DavHau/mach-nix/issues/123
        # In particular, we explicitly include the requirements of tahoe-lafs
        # here, and include it in a python package overlay.
        requirementsExtra = tahoe-lafs.requirements;
        overridesPre = [
          (
            self: super: {
              inherit tahoe-lafs;
            }
          )
        ];
        src = zkapauthorizer-repo;

        # Record some settings here, so downstream nix files can consume them.
        meta.mach-nix = { inherit python providers; };
      };

      magic-folder = mach-nix.buildPythonApplication rec {
        inherit providers;
        python = "python27";
        name = "magic-folder";
        version = "0.0.1";
        src = magic-folder-repo;
        # See zkapauthorizer
        requirementsExtra = tahoe-lafs.requirements;
        overridesPre = [
          (
            self: super: {
              inherit tahoe-lafs;
            }
          )
        ];
      };

      gridsync = pkgs.python39Packages.toPythonApplication gridsync-package;

      gridsync-testing = mach-nix.mkPython {
        python = "python39";
        # requirements = builtins.readFile "${gridsync-repo}/requirements/pytest.in";
        requirements = builtins.readFile "./pytest.in";
      };

      gridsync-package =
      let
        psio-src = lib.cleanSource ./.;
        assets = [
          { src = "${psio-src}/assets/PrivateStorage*"; dst = "images/"; }
          { src = "${psio-src}/assets/PrivateStorage*"; dst = "gridsync/resources/"; }
          { src = "${psio-src}/assets/PrivateStorage.png"; dst = "gridsync/resources/tahoe-lafs.png"; }
          { src = "${psio-src}/credentials/*.json"; dst = "gridsync/resources/providers/"; }
          { src = "${psio-src}/build/config.txt"; dst = "gridsync/resources/"; }
        ];
        apply-branding = assets:
          if builtins.length assets == 0 then
            ""
          else
            ''
            cp ${(builtins.head assets).src} ${(builtins.head assets).dst}
            ${apply-branding (builtins.tail assets)}
            '';
      in
      mach-nix.buildPythonPackage rec {
        inherit providers;
        python = "python39";
        version = "0.5.0";
        prePatch = ''
           # Replicate PrivateStorageDesktop `make source` logic here.
           ${apply-branding assets}
        '';
        requirementsExtra = ''
          # work around https://github.com/DavHau/mach-nix/issues/305 with an
          # explicit setuptools_rust dependency here
          setuptools_rust

          # mach-nix has problems with environment markers too
          distro

          # Get a version of PyQt5 that's compatible with the version of the Qt5
          # libraries available from the nixpkgs we're using.  If we change nixpkgs, we
          # might need to change this pin as well.  Without this, mach-nix will
          # just pull in the newest PyQt5 from PyPI (unless GridSync pins it otherwise)
          # and chances are it will not play nicely with our version.
          pyqt5 == 5.15.2
        '';
        src = gridsync-repo;

        # Get qtWrapperArgs set, even though wrapQtAppsHook won't wrap the
        # gridsync executable for us.
        nativeBuildInputs = [ pkgs.qt5.wrapQtAppsHook ];

        # For some reason pyqt5 fails to build like this if we don't add this
        # hook:
        #
        #  Error: wrapQtAppsHook is not used, and dontWrapQtApps is not set.
        #
        _.pyqt5.nativeBuildInputs.add = [ pkgs.qt5.wrapQtAppsHook ];

        # Wrap it ourselves because non-ELF executables are ignored by the
        # automatic wrapping logic.  This gets the Qt environment properly
        # initialized.
        makeWrapperArgs = [
          "\${qtWrapperArgs[@]}"
          # import Qt.labs.platform failed without this
          # "--prefix QML2_IMPORT_PATH : ${qt5.qtquickcontrols2.bin}/${qt5.qtbase.qtQmlPrefix}"
        ];
      };

      tahoe-lafs-env = mach-nix.mkPython {
        inherit providers;
        python = "python27";
        packagesExtra = [ zkapauthorizer tahoe-lafs ];
      };
      magic-folder-env = mach-nix.mkPython {
        inherit providers;
        python = "python27";
        packagesExtra = [ magic-folder ];
      };
      privatestorage =
        # Since we use this derivation in `environment.systemPackages`,
        # we create a derivation that has just the executables we use,
        # to avoid polluting the system PATH with all the executables
        # from our dependencies.
        pkgs.runCommandNoCC "privatestorage" {}
          ''
            mkdir -p $out/bin

            # Here's the main item.
            ln -s ${gridsync}/bin/gridsync $out/bin/gridsync

            # GridSync needs tahoe-lafs and magic-folder.
            ln -s ${tahoe-lafs-env}/bin/tahoe $out/bin
            ln -s ${magic-folder-env}/bin/magic-folder $out/bin

            # Include some tools that are useful for debugging.
            ln -s ${tahoe-lafs-env}/bin/flogtool $out/bin
            ln -s ${tahoe-lafs-env}/bin/eliot-prettyprint $out/bin
          '';
    }
